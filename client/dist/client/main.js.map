{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/build.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,6BAA6B,uBAAuB,KAAK,eAAe,uBAAuB,KAAK,iBAAiB,yBAAyB,KAAK,mBAAmB,wBAAwB,KAAK,K;;;;;;;;;;;ACAnM,8IAA8I,SAAS,GAAG,SAAS,gIAAgI,qBAAqB,yLAAyL,MAAM,icAAic,+DAA+D,IAAI,wBAAwB,oXAAoX,yCAAyC,8CAA8C,cAAc,kDAAkD,cAAc,sI;;;;;;;;;;;;;;;;;;;;;;;;;ACAt9C;AACpC;AAOlD;IAUE,sBAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAT9C,UAAK,GAAG,qBAAqB,CAAC;QAC9B,UAAK,GAAG,IAAI,CAAC;QACb,mBAAc,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAClE,eAAU,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5C,QAAQ;QACR,QAAQ;QAER,WAAM,GAAiB,EAAE,CAAC;IAEuB,CAAC;IAElD,+BAAQ,GAAR;QAAA,iBAiBC;QAhBC,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC1E,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,6CAA6C;QAC7C,WAAW,CAAC;YACV,IAAI,OAAO,GAAG,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK;gBACrC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACxB,CAAC,CAAC,CAAC;YACH,wDAAwD;YACxD,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnC,KAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC;QACH,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC;IAED,iCAAU,GAAV;QAAA,iBAWC;QAVC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,UAAC,MAAM;YAC7C,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,GAAG,CAAC,CAAc,UAAW,EAAX,UAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW;gBAAxB,IAAI,KAAK;gBACZ,4DAA4D;gBAC5D,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,0DAAW,CAAC,OAAO,CAAC,CAAC,CAAC;oBACvE,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACtB,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACvC,CAAC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iCAAU,GAAV,UAAW,SAAiB;QAA5B,iBAeC;QAdC,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,CAC/C,UAAC,MAAoB;gBACnB,IAAI,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC1C,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC;gBAC7B,+CAA+C;gBAC/C,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC7B,CAAC,EACD;gBACE,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC3B,CAAC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IAED,gCAAS,GAAT,UAAU,SAAiB;QACzB,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,IAAgB;YACjD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,SAAS,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,iCAAU,GAAV,UAAW,SAAiB;QAA5B,iBAyBC;QAxBC,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,CAC/C,UAAC,WAAuB;gBACtB,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBAClB,IAAI,WAAS,GAAG,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;oBAC1C,WAAS,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;oBAC5C,EAAE,CAAC,CAAC,WAAS,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC;wBAC5C,8CAA8C;wBAC9C,UAAU,CAAC;4BACT,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;wBAC7B,CAAC,EAAE,IAAI,CAAC,CAAC;oBACX,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,WAAS,CAAC,QAAQ,GAAG,KAAK,CAAC;oBAC7B,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,SAAS,CAAC,QAAQ,GAAG,KAAK,CAAC;gBAC7B,CAAC;YACH,CAAC,EACD;gBACE,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC3B,CAAC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IAED,kCAAW,GAAX,UAAY,SAAiB;QAC3B,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,UAAC,SAAqB;gBACvE,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC;oBAC9C,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,gCAAS,GAAT,UAAU,SAAqB;QAC7B,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,IAAI,0DAAW,CAAC,OAAO,CAAC;IACpF,CAAC;IA/GU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAWkC,2DAAY;OAVnC,YAAY,CAgHxB;IAAD,mBAAC;CAAA;AAhHwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACRsB;AACW;AACF;AACf;AAEM;AAe/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAbrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;aACjB;YACD,SAAS,EAAE;gBACT,2DAAY;aACb;YACD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBqB;AAEO;AAKlD;IACE,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,gCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,iCAAU,GAAV,UAAW,IAAY;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAS,IAAM,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,iCAAU,GAAV,UAAW,IAAY;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAa,YAAU,IAAM,CAAC,CAAC;IACrD,CAAC;IAED,kCAAW,GAAX,UAAY,IAAS;QACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAU,IAAM,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAjBU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAE0B,+DAAU;OADzB,YAAY,CAkBxB;IAAD,mBAAC;CAAA;AAlBwB;AAkCzB;IAAA;IAMA,CAAC;IALe,mBAAO,GAAG,SAAS,CAAC;IACpB,kBAAM,GAAG,QAAQ,CAAC;IAClB,qBAAS,GAAG,WAAW,CAAC;IACxB,oBAAQ,GAAG,UAAU,CAAC;IACtB,mBAAO,GAAG,SAAS,CAAC;IACpC,kBAAC;CAAA;AANuB;;;;;;;;;;;;;;ACzCxB;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".time-col {\\r\\n  min-width: 175px;\\r\\n}\\r\\n.step-col {\\r\\n  min-width: 100px;\\r\\n}\\r\\n.build-name {\\r\\n  font-size: x-large;\\r\\n}\\r\\n.table-header {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div style=\\\"text-align:center\\\">\\r\\n  <h1>\\r\\n    {{ title }} {{ emoji }}\\r\\n  </h1>\\r\\n</div>\\r\\n<h2>Builds:</h2>\\r\\n<div *ngFor=\\\"let build of builds\\\">\\r\\n  <div>\\r\\n    <div class=\\\"build-name\\\">{{build.buildDef.name}}</div>\\r\\n    <ng-container *ngIf=\\\"!build.watching\\\">\\r\\n      <button type=\\\"button\\\" (click)=\\\"checkBuild(build.buildDef.name)\\\">Refresh</button>\\r\\n    </ng-container>\\r\\n    &nbsp;&nbsp;\\r\\n    <ng-container *ngIf=\\\"!isRunning(build)\\\">\\r\\n      <button type=\\\"button\\\" (click)=\\\"startBuild(build.buildDef.name)\\\">Start</button>\\r\\n    </ng-container>\\r\\n    <ng-container *ngIf=\\\"isRunning(build)\\\">\\r\\n      <button type=\\\"button\\\" (click)=\\\"cancelBuild(build.buildDef.name)\\\">Cancel</button>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n  <ng-container *ngIf=\\\"build.latestRun\\\">\\r\\n    <div>\\r\\n      <h3>Latest Build</h3>\\r\\n      <h4>{{build.latestRun.lastUpdated | date:'h:mm:ss a, yyyy-MMMM-dd' }} ({{build.latestRun.result}}):</h4>\\r\\n      <table>\\r\\n        <thead class=\\\"table-header\\\">\\r\\n          <tr>\\r\\n            <td class=\\\"time-col\\\">Time</td>\\r\\n            <td class=\\\"step-col\\\">Step</td>\\r\\n            <td>Message</td>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          <tr *ngFor=\\\"let line of build.latestRun.log\\\">\\r\\n            <td class=\\\"time-col\\\">{{line.time | date:'yyyy-MM-dd h:mm:ss a'}}</td>\\r\\n            <td class=\\\"step-col\\\">{{line.command}}</td>\\r\\n            <td>\\r\\n              <pre>{{line.message}}</pre>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n    </div>\\r\\n  </ng-container>\\r\\n</div>\\r\\n\"","import { BuildService, IBuildInfo, BuildStatus, IBuildResult } from './build.service';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'BetterThanNothingCI';\r\n  emoji = '😉';\r\n  homePageEmojis = ['😉', '😂', '😍', '😆', '😎', '🤔', '🤪', '🤖'];\r\n  foodEmojis = ['🍕', '🍔', '🥓', '💣', '☠️'];\r\n  // '💎',\r\n  // '💰',\r\n\r\n  builds: IBuildInfo[] = [];\r\n\r\n  constructor(private buildService: BuildService) {}\r\n\r\n  ngOnInit(): void {\r\n    const emojiIndex = Math.floor(Math.random() * this.homePageEmojis.length);\r\n    const emoji = this.homePageEmojis[emojiIndex];\r\n    this.emoji = emoji;\r\n\r\n    this.loadBuilds();\r\n\r\n    // try to refresh the builds every 30 seconds\r\n    setInterval(() => {\r\n      var watched = this.builds.filter((build) => {\r\n        return build.watching;\r\n      });\r\n      // if no builds are currently watched, reload the builds\r\n      if (!watched || watched.length < 1) {\r\n        this.loadBuilds();\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  loadBuilds(): void {\r\n    this.buildService.getBuilds().subscribe((builds) => {\r\n      this.builds = builds;\r\n      for (let build of this.builds) {\r\n        // if its latest run is currently running, start watching it\r\n        if (!!build.latestRun && build.latestRun.result == BuildStatus.Running) {\r\n          build.watching = true;\r\n          this.checkBuild(build.buildDef.name);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  startBuild(buildName: string): void {\r\n    let buildInfo = this.findBuild(buildName);\r\n    if (!!buildInfo) {\r\n      this.buildService.startBuild(buildName).subscribe(\r\n        (result: IBuildResult) => {\r\n          let buildInfo = this.findBuild(buildName);\r\n          buildInfo.latestRun = result;\r\n          // build started, now we can watch for its logs\r\n          this.checkBuild(buildName);\r\n        },\r\n        () => {\r\n          window.location.reload();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  findBuild(buildName: string): IBuildInfo {\r\n    let matching = this.builds.filter((info: IBuildInfo) => {\r\n      return info.buildDef.name == buildName;\r\n    });\r\n    if (!!matching) {\r\n      return matching[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkBuild(buildName: string): void {\r\n    let buildInfo = this.findBuild(buildName);\r\n    if (!!buildInfo) {\r\n      this.buildService.checkBuild(buildName).subscribe(\r\n        (buildResult: IBuildInfo) => {\r\n          if (!!buildResult) {\r\n            let buildInfo = this.findBuild(buildName);\r\n            buildInfo.latestRun = buildResult.latestRun;\r\n            if (buildInfo.latestRun.result == 'Running') {\r\n              // still running, check again in a few seconds\r\n              setTimeout(() => {\r\n                this.checkBuild(buildName);\r\n              }, 2000);\r\n            } else {\r\n              buildInfo.watching = false;\r\n            }\r\n          } else {\r\n            buildInfo.watching = false;\r\n          }\r\n        },\r\n        () => {\r\n          window.location.reload();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  cancelBuild(buildName: string): void {\r\n    let buildInfo = this.findBuild(buildName);\r\n    if (!!buildInfo) {\r\n      this.buildService.cancelBuild(buildName).subscribe((buildInfo: IBuildInfo) => {\r\n        if (buildInfo.latestRun.result == 'Cancelled') {\r\n          console.log('cancelled build');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  isRunning(buildInfo: IBuildInfo): boolean {\r\n    return !!buildInfo.latestRun && buildInfo.latestRun.result == BuildStatus.Running;\r\n  }\r\n}\r\n","import { BuildService } from './build.service';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    BuildService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from '../../node_modules/rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BuildService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getBuilds(): Observable<[IBuildInfo]> {\r\n    return this.http.get<[IBuildInfo]>('builds');\r\n  }\r\n\r\n  startBuild(name: string): Observable<any> {\r\n    return this.http.post(`start/${name}`, null);\r\n  }\r\n\r\n  checkBuild(name: string): Observable<IBuildInfo> {\r\n    return this.http.get<IBuildInfo>(`builds/${name}`);\r\n  }\r\n\r\n  cancelBuild(name: any): Observable<any> {\r\n    return this.http.post(`cancel/${name}`, null);\r\n  }\r\n}\r\n\r\nexport interface IBuildInfo {\r\n  buildDef: IBuildDefinition;\r\n  latestRun: IBuildResult;\r\n  watching: boolean;\r\n}\r\n\r\nexport interface IBuildResult {\r\n  name: string;\r\n  buildDef: string;\r\n  lastUpdated: string;\r\n  result: BuildStatus;\r\n  log: LogLine[];\r\n}\r\n\r\nexport class BuildStatus {\r\n  public static Running = 'Running';\r\n  public static Failed = 'Failed';\r\n  public static Cancelled = 'Cancelled';\r\n  public static Unstable = 'Unstable';\r\n  public static Success = 'Success';\r\n}\r\n\r\nexport interface LogLine {\r\n  time: string;\r\n  message: string;\r\n  command: string;\r\n}\r\n\r\nexport interface IBuildDefinition {\r\n  name: string;\r\n  directory: string;\r\n  schedule: string;\r\n  steps: IBuildStep[];\r\n}\r\n\r\nexport interface IBuildStep {\r\n  command: string;\r\n  args: string[];\r\n  directory: string;\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}